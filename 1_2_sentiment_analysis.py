# -*- coding: utf-8 -*-
"""2.2.Sentiment_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NCvlgOHBtvfwpF84gSLh4hhiVJmTS_gM
"""

import numpy as np
from tensorflow.keras import layers, datasets, models, preprocessing
import tensorflow_datasets as tfds

def load_data():
    (X_train, Y_train), (X_test, Y_test)=datasets.imdb.load_data(num_words=10000)
    X_train=preprocessing.sequence.pad_sequences(X_train, maxlen=200)
    X_test=preprocessing.sequence.pad_sequences(X_test, maxlen=200)
    return (X_train, Y_train), (X_test, Y_test)

(X_train, Y_train), (X_test, Y_test)=load_data()

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

def build_model():
  model=models.Sequential()
  model.add(layers.Embedding(10000, 256, input_length=200))
  model.add(layers.Dropout(0.3))
  model.add(layers.GlobalMaxPooling1D())
  model.add(layers.Dropout(0.3))
  model.add(layers.Dense(128, activation="relu"))
  model.add(layers.Dropout(0.3))
  model.add(layers.Dense(1, activation="sigmoid"))
  return model

def model_compile(model):
  model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
  return model

def model_fit(model):
  score=model.fit(X_train, Y_train, epochs=20, batch_size=500, validation_data=(X_test, Y_test))
  return score

def model_evaluate(model, X_test, Y_test):
  test_score, test_acc=model.evaluate(X_test, Y_test, batch_size=500)
  print("Test score of the analysis is:", test_score)
  print("Test accuracy of the analysis is:", test_acc)

model=build_model()

model_compile(model)

model.summary()

model_fit(model)

model_evaluate(model, X_test, Y_test)

