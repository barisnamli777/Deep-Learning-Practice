# -*- coding: utf-8 -*-
"""2-1-Linear_Regression_with_NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/barisnamli777/95cfc787c7ab50b046744657f2da5a22/2-1-kitap.ipynb

In this study linear regression was considered by using neural network. For this purpose the book "Deep Learning with Tensorflow and Keras" was used.
"""

# Import library
import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import tensorflow.keras as K
from tensorflow.keras.layers import Dense

np.random.seed(0)
a=4*np.random.rand(1000)+17
b=1.7*a+np.random.randint(40,70,size=len(a))
data=np.array([a,b])
print(data.shape)
data=data.T
data=pd.DataFrame(data,columns=["a","b"])
print(data.shape)

plt.scatter(data["a"], data["b"], color="blue")
plt.show()

data=((data-data.min())/(data.max()-data.min()))

model=K.Sequential([
    Dense(1, input_shape=(1,), activation=None)
    ])

model.summary()

model.compile(
    loss="mse", optimizer="Adam"
)

model.fit(x=data["a"], y=data["b"], batch_size=32, epochs=100, verbose=1, validation_split=0.2)

y_pred=model.predict(data["a"])

plt.scatter(data["a"],data["b"],color="blue",label="data")
plt.plot(data["a"],y_pred,color="black",label="predicted value by using NN")
plt.xlabel("a")
plt.ylabel("b")
plt.legend()

